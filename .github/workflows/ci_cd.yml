name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-test:
    name: Lint, Build, Test, Coverage, Trivy Scans
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3
          working-directory: ./backend

      - name: Go Linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./backend

      - name: Build
        run: go build ./...
        working-directory: ./backend

      - name: Start tests dependencies
        run: |
          docker rm -f brokerx_test_db || true
          docker compose -f docker-compose.test.yml down -v || true
          docker compose -f docker-compose.test.yml up -d

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if docker exec brokerx_test_db mysqladmin ping -h "127.0.0.1" --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run Tests with Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out | tee coverage.txt
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          coverage_int=${coverage%.*}
          if [ "$coverage_int" -lt 60 ]; then
            echo "Code coverage ($coverage%) is below 60%"
            exit 1
          fi
        working-directory: ./backend

      - name: Run Trivy on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          severity: HIGH,CRITICAL
          exit-code: "1"
          ignore-unfixed: true
          scanners: vuln,secret

      - name: Build Docker image
        run: docker build -t brokerx-app .

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: brokerx-app
          severity: HIGH,CRITICAL
          exit-code: "1"
          ignore-unfixed: true
          scanners: vuln,secret

  deploy:
    name: Deploy with Docker Compose
    runs-on: self-hosted
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy containers
        run: |
          docker compose down || true
          docker compose up -d --build
